/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables.records;


import com.example.musicplatform.entity.tables.Artist;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtistRecord extends UpdatableRecordImpl<ArtistRecord> implements Record4<UUID, UUID, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.artist.id</code>.
     */
    public ArtistRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.artist.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.artist.user_id</code>.
     */
    public ArtistRecord setUserId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.artist.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.artist.nickname</code>.
     */
    public ArtistRecord setNickname(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.artist.nickname</code>.
     */
    public String getNickname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.artist.likes_count</code>.
     */
    public ArtistRecord setLikesCount(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.artist.likes_count</code>.
     */
    public Integer getLikesCount() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Artist.ARTIST.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Artist.ARTIST.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return Artist.ARTIST.NICKNAME;
    }

    @Override
    public Field<Integer> field4() {
        return Artist.ARTIST.LIKES_COUNT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getNickname();
    }

    @Override
    public Integer component4() {
        return getLikesCount();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getNickname();
    }

    @Override
    public Integer value4() {
        return getLikesCount();
    }

    @Override
    public ArtistRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ArtistRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public ArtistRecord value3(String value) {
        setNickname(value);
        return this;
    }

    @Override
    public ArtistRecord value4(Integer value) {
        setLikesCount(value);
        return this;
    }

    @Override
    public ArtistRecord values(UUID value1, UUID value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ArtistRecord
     */
    public ArtistRecord() {
        super(Artist.ARTIST);
    }

    /**
     * Create a detached, initialised ArtistRecord
     */
    public ArtistRecord(UUID id, UUID userId, String nickname, Integer likesCount) {
        super(Artist.ARTIST);

        setId(id);
        setUserId(userId);
        setNickname(nickname);
        setLikesCount(likesCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ArtistRecord
     */
    public ArtistRecord(com.example.musicplatform.entity.tables.pojos.Artist value) {
        super(Artist.ARTIST);

        if (value != null) {
            setId(value.getId());
            setUserId(value.getUserId());
            setNickname(value.getNickname());
            setLikesCount(value.getLikesCount());
            resetChangedOnNotNull();
        }
    }
}
