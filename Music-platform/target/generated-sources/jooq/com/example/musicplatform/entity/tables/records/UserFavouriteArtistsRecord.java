/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables.records;


import com.example.musicplatform.entity.tables.UserFavouriteArtists;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFavouriteArtistsRecord extends UpdatableRecordImpl<UserFavouriteArtistsRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_favourite_artists.user_id</code>.
     */
    public UserFavouriteArtistsRecord setUserId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.user_favourite_artists.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.user_favourite_artists.artist_id</code>.
     */
    public UserFavouriteArtistsRecord setArtistId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.user_favourite_artists.artist_id</code>.
     */
    public UUID getArtistId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return UserFavouriteArtists.USER_FAVOURITE_ARTISTS.USER_ID;
    }

    @Override
    public Field<UUID> field2() {
        return UserFavouriteArtists.USER_FAVOURITE_ARTISTS.ARTIST_ID;
    }

    @Override
    public UUID component1() {
        return getUserId();
    }

    @Override
    public UUID component2() {
        return getArtistId();
    }

    @Override
    public UUID value1() {
        return getUserId();
    }

    @Override
    public UUID value2() {
        return getArtistId();
    }

    @Override
    public UserFavouriteArtistsRecord value1(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserFavouriteArtistsRecord value2(UUID value) {
        setArtistId(value);
        return this;
    }

    @Override
    public UserFavouriteArtistsRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserFavouriteArtistsRecord
     */
    public UserFavouriteArtistsRecord() {
        super(UserFavouriteArtists.USER_FAVOURITE_ARTISTS);
    }

    /**
     * Create a detached, initialised UserFavouriteArtistsRecord
     */
    public UserFavouriteArtistsRecord(UUID userId, UUID artistId) {
        super(UserFavouriteArtists.USER_FAVOURITE_ARTISTS);

        setUserId(userId);
        setArtistId(artistId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserFavouriteArtistsRecord
     */
    public UserFavouriteArtistsRecord(com.example.musicplatform.entity.tables.pojos.UserFavouriteArtists value) {
        super(UserFavouriteArtists.USER_FAVOURITE_ARTISTS);

        if (value != null) {
            setUserId(value.getUserId());
            setArtistId(value.getArtistId());
            resetChangedOnNotNull();
        }
    }
}
