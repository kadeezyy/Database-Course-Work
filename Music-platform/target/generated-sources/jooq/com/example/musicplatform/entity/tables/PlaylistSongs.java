/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables;


import com.example.musicplatform.entity.Keys;
import com.example.musicplatform.entity.Public;
import com.example.musicplatform.entity.tables.records.PlaylistSongsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlaylistSongs extends TableImpl<PlaylistSongsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.playlist_songs</code>
     */
    public static final PlaylistSongs PLAYLIST_SONGS = new PlaylistSongs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaylistSongsRecord> getRecordType() {
        return PlaylistSongsRecord.class;
    }

    /**
     * The column <code>public.playlist_songs.playlist_id</code>.
     */
    public final TableField<PlaylistSongsRecord, UUID> PLAYLIST_ID = createField(DSL.name("playlist_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.playlist_songs.song_id</code>.
     */
    public final TableField<PlaylistSongsRecord, UUID> SONG_ID = createField(DSL.name("song_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.playlist_songs.date_added</code>.
     */
    public final TableField<PlaylistSongsRecord, LocalDateTime> DATE_ADDED = createField(DSL.name("date_added"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private PlaylistSongs(Name alias, Table<PlaylistSongsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlaylistSongs(Name alias, Table<PlaylistSongsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.playlist_songs</code> table reference
     */
    public PlaylistSongs(String alias) {
        this(DSL.name(alias), PLAYLIST_SONGS);
    }

    /**
     * Create an aliased <code>public.playlist_songs</code> table reference
     */
    public PlaylistSongs(Name alias) {
        this(alias, PLAYLIST_SONGS);
    }

    /**
     * Create a <code>public.playlist_songs</code> table reference
     */
    public PlaylistSongs() {
        this(DSL.name("playlist_songs"), null);
    }

    public <O extends Record> PlaylistSongs(Table<O> child, ForeignKey<O, PlaylistSongsRecord> key) {
        super(child, key, PLAYLIST_SONGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlaylistSongsRecord> getPrimaryKey() {
        return Keys.PLAYLIST_SONGS_PKEY;
    }

    @Override
    public List<ForeignKey<PlaylistSongsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLAYLIST_SONGS__PLAYLIST_ID_FK, Keys.PLAYLIST_SONGS__SONG_ID_FK);
    }

    private transient Playlist _playlist;
    private transient Song _song;

    /**
     * Get the implicit join path to the <code>public.playlist</code> table.
     */
    public Playlist playlist() {
        if (_playlist == null)
            _playlist = new Playlist(this, Keys.PLAYLIST_SONGS__PLAYLIST_ID_FK);

        return _playlist;
    }

    /**
     * Get the implicit join path to the <code>public.song</code> table.
     */
    public Song song() {
        if (_song == null)
            _song = new Song(this, Keys.PLAYLIST_SONGS__SONG_ID_FK);

        return _song;
    }

    @Override
    public PlaylistSongs as(String alias) {
        return new PlaylistSongs(DSL.name(alias), this);
    }

    @Override
    public PlaylistSongs as(Name alias) {
        return new PlaylistSongs(alias, this);
    }

    @Override
    public PlaylistSongs as(Table<?> alias) {
        return new PlaylistSongs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistSongs rename(String name) {
        return new PlaylistSongs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistSongs rename(Name name) {
        return new PlaylistSongs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaylistSongs rename(Table<?> name) {
        return new PlaylistSongs(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
