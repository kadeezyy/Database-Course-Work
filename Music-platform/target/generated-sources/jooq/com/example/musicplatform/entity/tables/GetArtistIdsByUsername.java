/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables;


import com.example.musicplatform.entity.Public;
import com.example.musicplatform.entity.tables.records.GetArtistIdsByUsernameRecord;

import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetArtistIdsByUsername extends TableImpl<GetArtistIdsByUsernameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.get_artist_ids_by_username</code>
     */
    public static final GetArtistIdsByUsername GET_ARTIST_IDS_BY_USERNAME = new GetArtistIdsByUsername();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetArtistIdsByUsernameRecord> getRecordType() {
        return GetArtistIdsByUsernameRecord.class;
    }

    /**
     * The column <code>public.get_artist_ids_by_username.artist_id</code>.
     */
    public final TableField<GetArtistIdsByUsernameRecord, UUID> ARTIST_ID = createField(DSL.name("artist_id"), SQLDataType.UUID, this, "");

    private GetArtistIdsByUsername(Name alias, Table<GetArtistIdsByUsernameRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private GetArtistIdsByUsername(Name alias, Table<GetArtistIdsByUsernameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.get_artist_ids_by_username</code> table
     * reference
     */
    public GetArtistIdsByUsername(String alias) {
        this(DSL.name(alias), GET_ARTIST_IDS_BY_USERNAME);
    }

    /**
     * Create an aliased <code>public.get_artist_ids_by_username</code> table
     * reference
     */
    public GetArtistIdsByUsername(Name alias) {
        this(alias, GET_ARTIST_IDS_BY_USERNAME);
    }

    /**
     * Create a <code>public.get_artist_ids_by_username</code> table reference
     */
    public GetArtistIdsByUsername() {
        this(DSL.name("get_artist_ids_by_username"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public GetArtistIdsByUsername as(String alias) {
        return new GetArtistIdsByUsername(DSL.name(alias), this, parameters);
    }

    @Override
    public GetArtistIdsByUsername as(Name alias) {
        return new GetArtistIdsByUsername(alias, this, parameters);
    }

    @Override
    public GetArtistIdsByUsername as(Table<?> alias) {
        return new GetArtistIdsByUsername(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetArtistIdsByUsername rename(String name) {
        return new GetArtistIdsByUsername(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetArtistIdsByUsername rename(Name name) {
        return new GetArtistIdsByUsername(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetArtistIdsByUsername rename(Table<?> name) {
        return new GetArtistIdsByUsername(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<UUID> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetArtistIdsByUsername call(
          String usernameParam
    ) {
        GetArtistIdsByUsername result = new GetArtistIdsByUsername(DSL.name("get_artist_ids_by_username"), null, new Field[] {
            DSL.val(usernameParam, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GetArtistIdsByUsername call(
          Field<String> usernameParam
    ) {
        GetArtistIdsByUsername result = new GetArtistIdsByUsername(DSL.name("get_artist_ids_by_username"), null, new Field[] {
            usernameParam
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
