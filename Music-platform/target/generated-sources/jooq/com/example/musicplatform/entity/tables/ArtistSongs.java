/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables;


import com.example.musicplatform.entity.Keys;
import com.example.musicplatform.entity.Public;
import com.example.musicplatform.entity.tables.records.ArtistSongsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtistSongs extends TableImpl<ArtistSongsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.artist_songs</code>
     */
    public static final ArtistSongs ARTIST_SONGS = new ArtistSongs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistSongsRecord> getRecordType() {
        return ArtistSongsRecord.class;
    }

    /**
     * The column <code>public.artist_songs.artist_id</code>.
     */
    public final TableField<ArtistSongsRecord, UUID> ARTIST_ID = createField(DSL.name("artist_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.artist_songs.song_id</code>.
     */
    public final TableField<ArtistSongsRecord, UUID> SONG_ID = createField(DSL.name("song_id"), SQLDataType.UUID.nullable(false), this, "");

    private ArtistSongs(Name alias, Table<ArtistSongsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtistSongs(Name alias, Table<ArtistSongsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.artist_songs</code> table reference
     */
    public ArtistSongs(String alias) {
        this(DSL.name(alias), ARTIST_SONGS);
    }

    /**
     * Create an aliased <code>public.artist_songs</code> table reference
     */
    public ArtistSongs(Name alias) {
        this(alias, ARTIST_SONGS);
    }

    /**
     * Create a <code>public.artist_songs</code> table reference
     */
    public ArtistSongs() {
        this(DSL.name("artist_songs"), null);
    }

    public <O extends Record> ArtistSongs(Table<O> child, ForeignKey<O, ArtistSongsRecord> key) {
        super(child, key, ARTIST_SONGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArtistSongsRecord> getPrimaryKey() {
        return Keys.ARTIST_SONGS_PKEY;
    }

    @Override
    public List<ForeignKey<ArtistSongsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARTIST_SONGS__ARTIST_ID_FK, Keys.ARTIST_SONGS__SONG_ID_FK);
    }

    private transient Artist _artist;
    private transient Song _song;

    /**
     * Get the implicit join path to the <code>public.artist</code> table.
     */
    public Artist artist() {
        if (_artist == null)
            _artist = new Artist(this, Keys.ARTIST_SONGS__ARTIST_ID_FK);

        return _artist;
    }

    /**
     * Get the implicit join path to the <code>public.song</code> table.
     */
    public Song song() {
        if (_song == null)
            _song = new Song(this, Keys.ARTIST_SONGS__SONG_ID_FK);

        return _song;
    }

    @Override
    public ArtistSongs as(String alias) {
        return new ArtistSongs(DSL.name(alias), this);
    }

    @Override
    public ArtistSongs as(Name alias) {
        return new ArtistSongs(alias, this);
    }

    @Override
    public ArtistSongs as(Table<?> alias) {
        return new ArtistSongs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistSongs rename(String name) {
        return new ArtistSongs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistSongs rename(Name name) {
        return new ArtistSongs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistSongs rename(Table<?> name) {
        return new ArtistSongs(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
