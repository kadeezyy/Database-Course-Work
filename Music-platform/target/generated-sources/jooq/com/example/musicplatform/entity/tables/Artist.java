/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables;


import com.example.musicplatform.entity.Indexes;
import com.example.musicplatform.entity.Keys;
import com.example.musicplatform.entity.Public;
import com.example.musicplatform.entity.tables.records.ArtistRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Artist extends TableImpl<ArtistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.artist</code>
     */
    public static final Artist ARTIST = new Artist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistRecord> getRecordType() {
        return ArtistRecord.class;
    }

    /**
     * The column <code>public.artist.id</code>.
     */
    public final TableField<ArtistRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.artist.user_id</code>.
     */
    public final TableField<ArtistRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.artist.nickname</code>.
     */
    public final TableField<ArtistRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.artist.likes_count</code>.
     */
    public final TableField<ArtistRecord, Integer> LIKES_COUNT = createField(DSL.name("likes_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Artist(Name alias, Table<ArtistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Artist(Name alias, Table<ArtistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.artist</code> table reference
     */
    public Artist(String alias) {
        this(DSL.name(alias), ARTIST);
    }

    /**
     * Create an aliased <code>public.artist</code> table reference
     */
    public Artist(Name alias) {
        this(alias, ARTIST);
    }

    /**
     * Create a <code>public.artist</code> table reference
     */
    public Artist() {
        this(DSL.name("artist"), null);
    }

    public <O extends Record> Artist(Table<O> child, ForeignKey<O, ArtistRecord> key) {
        super(child, key, ARTIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ARTIST_NICKNAME_IDX);
    }

    @Override
    public UniqueKey<ArtistRecord> getPrimaryKey() {
        return Keys.ARTIST_PKEY;
    }

    @Override
    public List<UniqueKey<ArtistRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ARTIST_NICKNAME_KEY);
    }

    @Override
    public List<ForeignKey<ArtistRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARTIST__USER_ID_FK);
    }

    private transient CustomUser _customUser;

    /**
     * Get the implicit join path to the <code>public.custom_user</code> table.
     */
    public CustomUser customUser() {
        if (_customUser == null)
            _customUser = new CustomUser(this, Keys.ARTIST__USER_ID_FK);

        return _customUser;
    }

    @Override
    public Artist as(String alias) {
        return new Artist(DSL.name(alias), this);
    }

    @Override
    public Artist as(Name alias) {
        return new Artist(alias, this);
    }

    @Override
    public Artist as(Table<?> alias) {
        return new Artist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Artist rename(String name) {
        return new Artist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Artist rename(Name name) {
        return new Artist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Artist rename(Table<?> name) {
        return new Artist(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super UUID, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super UUID, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
