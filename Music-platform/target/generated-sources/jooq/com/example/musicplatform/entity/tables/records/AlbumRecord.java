/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables.records;


import com.example.musicplatform.entity.tables.Album;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumRecord extends UpdatableRecordImpl<AlbumRecord> implements Record7<UUID, UUID, UUID, String, LocalDateTime, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.album.id</code>.
     */
    public AlbumRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.album.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.album.artist_id</code>.
     */
    public AlbumRecord setArtistId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.album.artist_id</code>.
     */
    public UUID getArtistId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.album.genre_id</code>.
     */
    public AlbumRecord setGenreId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.album.genre_id</code>.
     */
    public UUID getGenreId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.album.title</code>.
     */
    public AlbumRecord setTitle(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.album.title</code>.
     */
    public String getTitle() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.album.creation_date</code>.
     */
    public AlbumRecord setCreationDate(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.album.creation_date</code>.
     */
    public LocalDateTime getCreationDate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.album.songs_count</code>.
     */
    public AlbumRecord setSongsCount(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.album.songs_count</code>.
     */
    public Integer getSongsCount() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.album.likes_count</code>.
     */
    public AlbumRecord setLikesCount(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.album.likes_count</code>.
     */
    public Integer getLikesCount() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, String, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, UUID, UUID, String, LocalDateTime, Integer, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Album.ALBUM.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Album.ALBUM.ARTIST_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Album.ALBUM.GENRE_ID;
    }

    @Override
    public Field<String> field4() {
        return Album.ALBUM.TITLE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Album.ALBUM.CREATION_DATE;
    }

    @Override
    public Field<Integer> field6() {
        return Album.ALBUM.SONGS_COUNT;
    }

    @Override
    public Field<Integer> field7() {
        return Album.ALBUM.LIKES_COUNT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getArtistId();
    }

    @Override
    public UUID component3() {
        return getGenreId();
    }

    @Override
    public String component4() {
        return getTitle();
    }

    @Override
    public LocalDateTime component5() {
        return getCreationDate();
    }

    @Override
    public Integer component6() {
        return getSongsCount();
    }

    @Override
    public Integer component7() {
        return getLikesCount();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getArtistId();
    }

    @Override
    public UUID value3() {
        return getGenreId();
    }

    @Override
    public String value4() {
        return getTitle();
    }

    @Override
    public LocalDateTime value5() {
        return getCreationDate();
    }

    @Override
    public Integer value6() {
        return getSongsCount();
    }

    @Override
    public Integer value7() {
        return getLikesCount();
    }

    @Override
    public AlbumRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public AlbumRecord value2(UUID value) {
        setArtistId(value);
        return this;
    }

    @Override
    public AlbumRecord value3(UUID value) {
        setGenreId(value);
        return this;
    }

    @Override
    public AlbumRecord value4(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public AlbumRecord value5(LocalDateTime value) {
        setCreationDate(value);
        return this;
    }

    @Override
    public AlbumRecord value6(Integer value) {
        setSongsCount(value);
        return this;
    }

    @Override
    public AlbumRecord value7(Integer value) {
        setLikesCount(value);
        return this;
    }

    @Override
    public AlbumRecord values(UUID value1, UUID value2, UUID value3, String value4, LocalDateTime value5, Integer value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumRecord
     */
    public AlbumRecord() {
        super(Album.ALBUM);
    }

    /**
     * Create a detached, initialised AlbumRecord
     */
    public AlbumRecord(UUID id, UUID artistId, UUID genreId, String title, LocalDateTime creationDate, Integer songsCount, Integer likesCount) {
        super(Album.ALBUM);

        setId(id);
        setArtistId(artistId);
        setGenreId(genreId);
        setTitle(title);
        setCreationDate(creationDate);
        setSongsCount(songsCount);
        setLikesCount(likesCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AlbumRecord
     */
    public AlbumRecord(com.example.musicplatform.entity.tables.pojos.Album value) {
        super(Album.ALBUM);

        if (value != null) {
            setId(value.getId());
            setArtistId(value.getArtistId());
            setGenreId(value.getGenreId());
            setTitle(value.getTitle());
            setCreationDate(value.getCreationDate());
            setSongsCount(value.getSongsCount());
            setLikesCount(value.getLikesCount());
            resetChangedOnNotNull();
        }
    }
}
