/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity;


import com.example.musicplatform.entity.tables.Album;
import com.example.musicplatform.entity.tables.AlbumSongs;
import com.example.musicplatform.entity.tables.Artist;
import com.example.musicplatform.entity.tables.ArtistSongs;
import com.example.musicplatform.entity.tables.CustomUser;
import com.example.musicplatform.entity.tables.Genre;
import com.example.musicplatform.entity.tables.Playlist;
import com.example.musicplatform.entity.tables.PlaylistSongs;
import com.example.musicplatform.entity.tables.Song;
import com.example.musicplatform.entity.tables.UserFavouriteAlbums;
import com.example.musicplatform.entity.tables.UserFavouriteArtists;
import com.example.musicplatform.entity.tables.UserFavouritePlaylists;
import com.example.musicplatform.entity.tables.UserLikedSongs;
import com.example.musicplatform.entity.tables.UserListeningHistory;
import com.example.musicplatform.entity.tables.records.AlbumRecord;
import com.example.musicplatform.entity.tables.records.AlbumSongsRecord;
import com.example.musicplatform.entity.tables.records.ArtistRecord;
import com.example.musicplatform.entity.tables.records.ArtistSongsRecord;
import com.example.musicplatform.entity.tables.records.CustomUserRecord;
import com.example.musicplatform.entity.tables.records.GenreRecord;
import com.example.musicplatform.entity.tables.records.PlaylistRecord;
import com.example.musicplatform.entity.tables.records.PlaylistSongsRecord;
import com.example.musicplatform.entity.tables.records.SongRecord;
import com.example.musicplatform.entity.tables.records.UserFavouriteAlbumsRecord;
import com.example.musicplatform.entity.tables.records.UserFavouriteArtistsRecord;
import com.example.musicplatform.entity.tables.records.UserFavouritePlaylistsRecord;
import com.example.musicplatform.entity.tables.records.UserLikedSongsRecord;
import com.example.musicplatform.entity.tables.records.UserListeningHistoryRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AlbumRecord> ALBUM_PKEY = Internal.createUniqueKey(Album.ALBUM, DSL.name("album_pkey"), new TableField[] { Album.ALBUM.ID }, true);
    public static final UniqueKey<AlbumSongsRecord> ALBUM_SONGS_PKEY = Internal.createUniqueKey(AlbumSongs.ALBUM_SONGS, DSL.name("album_songs_pkey"), new TableField[] { AlbumSongs.ALBUM_SONGS.ALBUM_ID, AlbumSongs.ALBUM_SONGS.SONG_ID }, true);
    public static final UniqueKey<ArtistRecord> ARTIST_NICKNAME_KEY = Internal.createUniqueKey(Artist.ARTIST, DSL.name("artist_nickname_key"), new TableField[] { Artist.ARTIST.NICKNAME }, true);
    public static final UniqueKey<ArtistRecord> ARTIST_PKEY = Internal.createUniqueKey(Artist.ARTIST, DSL.name("artist_pkey"), new TableField[] { Artist.ARTIST.ID }, true);
    public static final UniqueKey<ArtistSongsRecord> ARTIST_SONGS_PKEY = Internal.createUniqueKey(ArtistSongs.ARTIST_SONGS, DSL.name("artist_songs_pkey"), new TableField[] { ArtistSongs.ARTIST_SONGS.ARTIST_ID, ArtistSongs.ARTIST_SONGS.SONG_ID }, true);
    public static final UniqueKey<CustomUserRecord> CUSTOM_USER_EMAIL_KEY = Internal.createUniqueKey(CustomUser.CUSTOM_USER, DSL.name("custom_user_email_key"), new TableField[] { CustomUser.CUSTOM_USER.EMAIL }, true);
    public static final UniqueKey<CustomUserRecord> CUSTOM_USER_PKEY = Internal.createUniqueKey(CustomUser.CUSTOM_USER, DSL.name("custom_user_pkey"), new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
    public static final UniqueKey<GenreRecord> GENRE_NAME_KEY = Internal.createUniqueKey(Genre.GENRE, DSL.name("genre_name_key"), new TableField[] { Genre.GENRE.NAME }, true);
    public static final UniqueKey<GenreRecord> GENRE_PKEY = Internal.createUniqueKey(Genre.GENRE, DSL.name("genre_pkey"), new TableField[] { Genre.GENRE.ID }, true);
    public static final UniqueKey<PlaylistRecord> PLAYLIST_PKEY = Internal.createUniqueKey(Playlist.PLAYLIST, DSL.name("playlist_pkey"), new TableField[] { Playlist.PLAYLIST.ID }, true);
    public static final UniqueKey<PlaylistSongsRecord> PLAYLIST_SONGS_PKEY = Internal.createUniqueKey(PlaylistSongs.PLAYLIST_SONGS, DSL.name("playlist_songs_pkey"), new TableField[] { PlaylistSongs.PLAYLIST_SONGS.PLAYLIST_ID, PlaylistSongs.PLAYLIST_SONGS.SONG_ID }, true);
    public static final UniqueKey<SongRecord> SONG_PKEY = Internal.createUniqueKey(Song.SONG, DSL.name("song_pkey"), new TableField[] { Song.SONG.ID }, true);
    public static final UniqueKey<UserFavouriteAlbumsRecord> USER_FAVOURITE_ALBUMS_PKEY = Internal.createUniqueKey(UserFavouriteAlbums.USER_FAVOURITE_ALBUMS, DSL.name("user_favourite_albums_pkey"), new TableField[] { UserFavouriteAlbums.USER_FAVOURITE_ALBUMS.USER_ID, UserFavouriteAlbums.USER_FAVOURITE_ALBUMS.ALBUM_ID }, true);
    public static final UniqueKey<UserFavouriteArtistsRecord> USER_FAVOURITE_ARTISTS_PKEY = Internal.createUniqueKey(UserFavouriteArtists.USER_FAVOURITE_ARTISTS, DSL.name("user_favourite_artists_pkey"), new TableField[] { UserFavouriteArtists.USER_FAVOURITE_ARTISTS.USER_ID, UserFavouriteArtists.USER_FAVOURITE_ARTISTS.ARTIST_ID }, true);
    public static final UniqueKey<UserFavouritePlaylistsRecord> USER_FAVOURITE_PLAYLISTS_PKEY = Internal.createUniqueKey(UserFavouritePlaylists.USER_FAVOURITE_PLAYLISTS, DSL.name("user_favourite_playlists_pkey"), new TableField[] { UserFavouritePlaylists.USER_FAVOURITE_PLAYLISTS.USER_ID, UserFavouritePlaylists.USER_FAVOURITE_PLAYLISTS.PLAYLIST_ID }, true);
    public static final UniqueKey<UserLikedSongsRecord> USER_LIKED_SONGS_PKEY = Internal.createUniqueKey(UserLikedSongs.USER_LIKED_SONGS, DSL.name("user_liked_songs_pkey"), new TableField[] { UserLikedSongs.USER_LIKED_SONGS.USER_ID, UserLikedSongs.USER_LIKED_SONGS.SONG_ID }, true);
    public static final UniqueKey<UserListeningHistoryRecord> USER_LISTENING_HISTORY_PKEY = Internal.createUniqueKey(UserListeningHistory.USER_LISTENING_HISTORY, DSL.name("user_listening_history_pkey"), new TableField[] { UserListeningHistory.USER_LISTENING_HISTORY.USER_ID, UserListeningHistory.USER_LISTENING_HISTORY.SONG_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AlbumRecord, ArtistRecord> ALBUM__ARTIST_ID_FK = Internal.createForeignKey(Album.ALBUM, DSL.name("artist_id_fk"), new TableField[] { Album.ALBUM.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<AlbumRecord, GenreRecord> ALBUM__GENRE_ID_FK = Internal.createForeignKey(Album.ALBUM, DSL.name("genre_id_fk"), new TableField[] { Album.ALBUM.GENRE_ID }, Keys.GENRE_PKEY, new TableField[] { Genre.GENRE.ID }, true);
    public static final ForeignKey<AlbumSongsRecord, AlbumRecord> ALBUM_SONGS__ALBUM_ID_FK = Internal.createForeignKey(AlbumSongs.ALBUM_SONGS, DSL.name("album_id_fk"), new TableField[] { AlbumSongs.ALBUM_SONGS.ALBUM_ID }, Keys.ALBUM_PKEY, new TableField[] { Album.ALBUM.ID }, true);
    public static final ForeignKey<AlbumSongsRecord, SongRecord> ALBUM_SONGS__SONG_ID_FK = Internal.createForeignKey(AlbumSongs.ALBUM_SONGS, DSL.name("song_id_fk"), new TableField[] { AlbumSongs.ALBUM_SONGS.SONG_ID }, Keys.SONG_PKEY, new TableField[] { Song.SONG.ID }, true);
    public static final ForeignKey<ArtistRecord, CustomUserRecord> ARTIST__USER_ID_FK = Internal.createForeignKey(Artist.ARTIST, DSL.name("user_id_fk"), new TableField[] { Artist.ARTIST.USER_ID }, Keys.CUSTOM_USER_PKEY, new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
    public static final ForeignKey<ArtistSongsRecord, ArtistRecord> ARTIST_SONGS__ARTIST_ID_FK = Internal.createForeignKey(ArtistSongs.ARTIST_SONGS, DSL.name("artist_id_fk"), new TableField[] { ArtistSongs.ARTIST_SONGS.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<ArtistSongsRecord, SongRecord> ARTIST_SONGS__SONG_ID_FK = Internal.createForeignKey(ArtistSongs.ARTIST_SONGS, DSL.name("song_id_fk"), new TableField[] { ArtistSongs.ARTIST_SONGS.SONG_ID }, Keys.SONG_PKEY, new TableField[] { Song.SONG.ID }, true);
    public static final ForeignKey<PlaylistRecord, CustomUserRecord> PLAYLIST__USER_CREATOR_ID_FK = Internal.createForeignKey(Playlist.PLAYLIST, DSL.name("user_creator_id_fk"), new TableField[] { Playlist.PLAYLIST.USER_CREATOR_ID }, Keys.CUSTOM_USER_PKEY, new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
    public static final ForeignKey<PlaylistSongsRecord, PlaylistRecord> PLAYLIST_SONGS__PLAYLIST_ID_FK = Internal.createForeignKey(PlaylistSongs.PLAYLIST_SONGS, DSL.name("playlist_id_fk"), new TableField[] { PlaylistSongs.PLAYLIST_SONGS.PLAYLIST_ID }, Keys.PLAYLIST_PKEY, new TableField[] { Playlist.PLAYLIST.ID }, true);
    public static final ForeignKey<PlaylistSongsRecord, SongRecord> PLAYLIST_SONGS__SONG_ID_FK = Internal.createForeignKey(PlaylistSongs.PLAYLIST_SONGS, DSL.name("song_id_fk"), new TableField[] { PlaylistSongs.PLAYLIST_SONGS.SONG_ID }, Keys.SONG_PKEY, new TableField[] { Song.SONG.ID }, true);
    public static final ForeignKey<SongRecord, GenreRecord> SONG__GENRE_ID_FK = Internal.createForeignKey(Song.SONG, DSL.name("genre_id_fk"), new TableField[] { Song.SONG.GENRE_ID }, Keys.GENRE_PKEY, new TableField[] { Genre.GENRE.ID }, true);
    public static final ForeignKey<UserFavouriteAlbumsRecord, AlbumRecord> USER_FAVOURITE_ALBUMS__ALBUM_ID_FK = Internal.createForeignKey(UserFavouriteAlbums.USER_FAVOURITE_ALBUMS, DSL.name("album_id_fk"), new TableField[] { UserFavouriteAlbums.USER_FAVOURITE_ALBUMS.ALBUM_ID }, Keys.ALBUM_PKEY, new TableField[] { Album.ALBUM.ID }, true);
    public static final ForeignKey<UserFavouriteAlbumsRecord, CustomUserRecord> USER_FAVOURITE_ALBUMS__USER_ID_FK = Internal.createForeignKey(UserFavouriteAlbums.USER_FAVOURITE_ALBUMS, DSL.name("user_id_fk"), new TableField[] { UserFavouriteAlbums.USER_FAVOURITE_ALBUMS.USER_ID }, Keys.CUSTOM_USER_PKEY, new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
    public static final ForeignKey<UserFavouriteArtistsRecord, ArtistRecord> USER_FAVOURITE_ARTISTS__ARTIST_ID_FK = Internal.createForeignKey(UserFavouriteArtists.USER_FAVOURITE_ARTISTS, DSL.name("artist_id_fk"), new TableField[] { UserFavouriteArtists.USER_FAVOURITE_ARTISTS.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<UserFavouriteArtistsRecord, CustomUserRecord> USER_FAVOURITE_ARTISTS__USER_ID_FK = Internal.createForeignKey(UserFavouriteArtists.USER_FAVOURITE_ARTISTS, DSL.name("user_id_fk"), new TableField[] { UserFavouriteArtists.USER_FAVOURITE_ARTISTS.USER_ID }, Keys.CUSTOM_USER_PKEY, new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
    public static final ForeignKey<UserFavouritePlaylistsRecord, PlaylistRecord> USER_FAVOURITE_PLAYLISTS__PLAYLIST_ID_FK = Internal.createForeignKey(UserFavouritePlaylists.USER_FAVOURITE_PLAYLISTS, DSL.name("playlist_id_fk"), new TableField[] { UserFavouritePlaylists.USER_FAVOURITE_PLAYLISTS.PLAYLIST_ID }, Keys.PLAYLIST_PKEY, new TableField[] { Playlist.PLAYLIST.ID }, true);
    public static final ForeignKey<UserFavouritePlaylistsRecord, CustomUserRecord> USER_FAVOURITE_PLAYLISTS__USER_ID_FK = Internal.createForeignKey(UserFavouritePlaylists.USER_FAVOURITE_PLAYLISTS, DSL.name("user_id_fk"), new TableField[] { UserFavouritePlaylists.USER_FAVOURITE_PLAYLISTS.USER_ID }, Keys.CUSTOM_USER_PKEY, new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
    public static final ForeignKey<UserLikedSongsRecord, SongRecord> USER_LIKED_SONGS__SONG_ID_FK = Internal.createForeignKey(UserLikedSongs.USER_LIKED_SONGS, DSL.name("song_id_fk"), new TableField[] { UserLikedSongs.USER_LIKED_SONGS.SONG_ID }, Keys.SONG_PKEY, new TableField[] { Song.SONG.ID }, true);
    public static final ForeignKey<UserLikedSongsRecord, CustomUserRecord> USER_LIKED_SONGS__USER_ID_FK = Internal.createForeignKey(UserLikedSongs.USER_LIKED_SONGS, DSL.name("user_id_fk"), new TableField[] { UserLikedSongs.USER_LIKED_SONGS.USER_ID }, Keys.CUSTOM_USER_PKEY, new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
    public static final ForeignKey<UserListeningHistoryRecord, SongRecord> USER_LISTENING_HISTORY__SONG_ID_FK = Internal.createForeignKey(UserListeningHistory.USER_LISTENING_HISTORY, DSL.name("song_id_fk"), new TableField[] { UserListeningHistory.USER_LISTENING_HISTORY.SONG_ID }, Keys.SONG_PKEY, new TableField[] { Song.SONG.ID }, true);
    public static final ForeignKey<UserListeningHistoryRecord, CustomUserRecord> USER_LISTENING_HISTORY__USER_ID_FK = Internal.createForeignKey(UserListeningHistory.USER_LISTENING_HISTORY, DSL.name("user_id_fk"), new TableField[] { UserListeningHistory.USER_LISTENING_HISTORY.USER_ID }, Keys.CUSTOM_USER_PKEY, new TableField[] { CustomUser.CUSTOM_USER.ID }, true);
}
