/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables;


import com.example.musicplatform.entity.Indexes;
import com.example.musicplatform.entity.Keys;
import com.example.musicplatform.entity.Public;
import com.example.musicplatform.entity.tables.records.GenreRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Genre extends TableImpl<GenreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.genre</code>
     */
    public static final Genre GENRE = new Genre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenreRecord> getRecordType() {
        return GenreRecord.class;
    }

    /**
     * The column <code>public.genre.id</code>.
     */
    public final TableField<GenreRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.genre.name</code>.
     */
    public final TableField<GenreRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.genre.description</code>.
     */
    public final TableField<GenreRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Genre(Name alias, Table<GenreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Genre(Name alias, Table<GenreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.genre</code> table reference
     */
    public Genre(String alias) {
        this(DSL.name(alias), GENRE);
    }

    /**
     * Create an aliased <code>public.genre</code> table reference
     */
    public Genre(Name alias) {
        this(alias, GENRE);
    }

    /**
     * Create a <code>public.genre</code> table reference
     */
    public Genre() {
        this(DSL.name("genre"), null);
    }

    public <O extends Record> Genre(Table<O> child, ForeignKey<O, GenreRecord> key) {
        super(child, key, GENRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GENRE_NAME_IDX);
    }

    @Override
    public UniqueKey<GenreRecord> getPrimaryKey() {
        return Keys.GENRE_PKEY;
    }

    @Override
    public List<UniqueKey<GenreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.GENRE_NAME_KEY);
    }

    @Override
    public Genre as(String alias) {
        return new Genre(DSL.name(alias), this);
    }

    @Override
    public Genre as(Name alias) {
        return new Genre(alias, this);
    }

    @Override
    public Genre as(Table<?> alias) {
        return new Genre(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Genre rename(String name) {
        return new Genre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genre rename(Name name) {
        return new Genre(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genre rename(Table<?> name) {
        return new Genre(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
