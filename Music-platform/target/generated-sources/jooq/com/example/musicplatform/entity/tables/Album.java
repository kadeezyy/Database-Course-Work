/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables;


import com.example.musicplatform.entity.Indexes;
import com.example.musicplatform.entity.Keys;
import com.example.musicplatform.entity.Public;
import com.example.musicplatform.entity.tables.records.AlbumRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Album extends TableImpl<AlbumRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.album</code>
     */
    public static final Album ALBUM = new Album();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumRecord> getRecordType() {
        return AlbumRecord.class;
    }

    /**
     * The column <code>public.album.id</code>.
     */
    public final TableField<AlbumRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.album.artist_id</code>.
     */
    public final TableField<AlbumRecord, UUID> ARTIST_ID = createField(DSL.name("artist_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.album.genre_id</code>.
     */
    public final TableField<AlbumRecord, UUID> GENRE_ID = createField(DSL.name("genre_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.album.title</code>.
     */
    public final TableField<AlbumRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.album.creation_date</code>.
     */
    public final TableField<AlbumRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.album.songs_count</code>.
     */
    public final TableField<AlbumRecord, Integer> SONGS_COUNT = createField(DSL.name("songs_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.album.likes_count</code>.
     */
    public final TableField<AlbumRecord, Integer> LIKES_COUNT = createField(DSL.name("likes_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Album(Name alias, Table<AlbumRecord> aliased) {
        this(alias, aliased, null);
    }

    private Album(Name alias, Table<AlbumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.album</code> table reference
     */
    public Album(String alias) {
        this(DSL.name(alias), ALBUM);
    }

    /**
     * Create an aliased <code>public.album</code> table reference
     */
    public Album(Name alias) {
        this(alias, ALBUM);
    }

    /**
     * Create a <code>public.album</code> table reference
     */
    public Album() {
        this(DSL.name("album"), null);
    }

    public <O extends Record> Album(Table<O> child, ForeignKey<O, AlbumRecord> key) {
        super(child, key, ALBUM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALBUM_TITLE_IDX);
    }

    @Override
    public UniqueKey<AlbumRecord> getPrimaryKey() {
        return Keys.ALBUM_PKEY;
    }

    @Override
    public List<ForeignKey<AlbumRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ALBUM__ARTIST_ID_FK, Keys.ALBUM__GENRE_ID_FK);
    }

    private transient Artist _artist;
    private transient Genre _genre;

    /**
     * Get the implicit join path to the <code>public.artist</code> table.
     */
    public Artist artist() {
        if (_artist == null)
            _artist = new Artist(this, Keys.ALBUM__ARTIST_ID_FK);

        return _artist;
    }

    /**
     * Get the implicit join path to the <code>public.genre</code> table.
     */
    public Genre genre() {
        if (_genre == null)
            _genre = new Genre(this, Keys.ALBUM__GENRE_ID_FK);

        return _genre;
    }

    @Override
    public Album as(String alias) {
        return new Album(DSL.name(alias), this);
    }

    @Override
    public Album as(Name alias) {
        return new Album(alias, this);
    }

    @Override
    public Album as(Table<?> alias) {
        return new Album(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(String name) {
        return new Album(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(Name name) {
        return new Album(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(Table<?> name) {
        return new Album(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, String, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super UUID, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super UUID, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
