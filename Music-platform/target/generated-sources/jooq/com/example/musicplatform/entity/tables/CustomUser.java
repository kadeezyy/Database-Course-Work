/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables;


import com.example.musicplatform.entity.Keys;
import com.example.musicplatform.entity.Public;
import com.example.musicplatform.entity.enums.Role;
import com.example.musicplatform.entity.tables.records.CustomUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomUser extends TableImpl<CustomUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.custom_user</code>
     */
    public static final CustomUser CUSTOM_USER = new CustomUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomUserRecord> getRecordType() {
        return CustomUserRecord.class;
    }

    /**
     * The column <code>public.custom_user.id</code>.
     */
    public final TableField<CustomUserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.custom_user.role_id</code>.
     */
    public final TableField<CustomUserRecord, Role> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.example.musicplatform.entity.enums.Role.class), this, "");

    /**
     * The column <code>public.custom_user.username</code>.
     */
    public final TableField<CustomUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.custom_user.password</code>.
     */
    public final TableField<CustomUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.custom_user.email</code>.
     */
    public final TableField<CustomUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.custom_user.creation_date</code>.
     */
    public final TableField<CustomUserRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private CustomUser(Name alias, Table<CustomUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomUser(Name alias, Table<CustomUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.custom_user</code> table reference
     */
    public CustomUser(String alias) {
        this(DSL.name(alias), CUSTOM_USER);
    }

    /**
     * Create an aliased <code>public.custom_user</code> table reference
     */
    public CustomUser(Name alias) {
        this(alias, CUSTOM_USER);
    }

    /**
     * Create a <code>public.custom_user</code> table reference
     */
    public CustomUser() {
        this(DSL.name("custom_user"), null);
    }

    public <O extends Record> CustomUser(Table<O> child, ForeignKey<O, CustomUserRecord> key) {
        super(child, key, CUSTOM_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CustomUserRecord> getPrimaryKey() {
        return Keys.CUSTOM_USER_PKEY;
    }

    @Override
    public List<UniqueKey<CustomUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CUSTOM_USER_EMAIL_KEY);
    }

    @Override
    public CustomUser as(String alias) {
        return new CustomUser(DSL.name(alias), this);
    }

    @Override
    public CustomUser as(Name alias) {
        return new CustomUser(alias, this);
    }

    @Override
    public CustomUser as(Table<?> alias) {
        return new CustomUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomUser rename(String name) {
        return new CustomUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomUser rename(Name name) {
        return new CustomUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomUser rename(Table<?> name) {
        return new CustomUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, Role, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super Role, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super Role, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
