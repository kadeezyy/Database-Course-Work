/*
 * This file is generated by jOOQ.
 */
package com.example.musicplatform.entity.tables.records;


import com.example.musicplatform.entity.tables.UserFavouriteAlbums;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFavouriteAlbumsRecord extends UpdatableRecordImpl<UserFavouriteAlbumsRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_favourite_albums.user_id</code>.
     */
    public UserFavouriteAlbumsRecord setUserId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.user_favourite_albums.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.user_favourite_albums.album_id</code>.
     */
    public UserFavouriteAlbumsRecord setAlbumId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.user_favourite_albums.album_id</code>.
     */
    public UUID getAlbumId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return UserFavouriteAlbums.USER_FAVOURITE_ALBUMS.USER_ID;
    }

    @Override
    public Field<UUID> field2() {
        return UserFavouriteAlbums.USER_FAVOURITE_ALBUMS.ALBUM_ID;
    }

    @Override
    public UUID component1() {
        return getUserId();
    }

    @Override
    public UUID component2() {
        return getAlbumId();
    }

    @Override
    public UUID value1() {
        return getUserId();
    }

    @Override
    public UUID value2() {
        return getAlbumId();
    }

    @Override
    public UserFavouriteAlbumsRecord value1(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserFavouriteAlbumsRecord value2(UUID value) {
        setAlbumId(value);
        return this;
    }

    @Override
    public UserFavouriteAlbumsRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserFavouriteAlbumsRecord
     */
    public UserFavouriteAlbumsRecord() {
        super(UserFavouriteAlbums.USER_FAVOURITE_ALBUMS);
    }

    /**
     * Create a detached, initialised UserFavouriteAlbumsRecord
     */
    public UserFavouriteAlbumsRecord(UUID userId, UUID albumId) {
        super(UserFavouriteAlbums.USER_FAVOURITE_ALBUMS);

        setUserId(userId);
        setAlbumId(albumId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserFavouriteAlbumsRecord
     */
    public UserFavouriteAlbumsRecord(com.example.musicplatform.entity.tables.pojos.UserFavouriteAlbums value) {
        super(UserFavouriteAlbums.USER_FAVOURITE_ALBUMS);

        if (value != null) {
            setUserId(value.getUserId());
            setAlbumId(value.getAlbumId());
            resetChangedOnNotNull();
        }
    }
}
